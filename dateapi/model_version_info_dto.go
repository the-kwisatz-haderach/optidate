/*
Nager.Date API - V3

Nager.Date is open source software. If you would like to support the project you can award a GitHub star ‚≠ê or much better <a href='https://github.com/sponsors/nager'>start a sponsorship</a>

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dateapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VersionInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionInfoDto{}

// VersionInfoDto Version Info Dto
type VersionInfoDto struct {
	// Name
	Name NullableString `json:"name"`
	// Version
	Version NullableString `json:"version"`
}

type _VersionInfoDto VersionInfoDto

// NewVersionInfoDto instantiates a new VersionInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionInfoDto(name NullableString, version NullableString) *VersionInfoDto {
	this := VersionInfoDto{}
	this.Name = name
	this.Version = version
	return &this
}

// NewVersionInfoDtoWithDefaults instantiates a new VersionInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionInfoDtoWithDefaults() *VersionInfoDto {
	this := VersionInfoDto{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VersionInfoDto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VersionInfoDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *VersionInfoDto) SetName(v string) {
	o.Name.Set(&v)
}

// GetVersion returns the Version field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VersionInfoDto) GetVersion() string {
	if o == nil || o.Version.Get() == nil {
		var ret string
		return ret
	}

	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VersionInfoDto) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// SetVersion sets field value
func (o *VersionInfoDto) SetVersion(v string) {
	o.Version.Set(&v)
}

func (o VersionInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name.Get()
	toSerialize["version"] = o.Version.Get()
	return toSerialize, nil
}

func (o *VersionInfoDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersionInfoDto := _VersionInfoDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVersionInfoDto)

	if err != nil {
		return err
	}

	*o = VersionInfoDto(varVersionInfoDto)

	return err
}

type NullableVersionInfoDto struct {
	value *VersionInfoDto
	isSet bool
}

func (v NullableVersionInfoDto) Get() *VersionInfoDto {
	return v.value
}

func (v *NullableVersionInfoDto) Set(val *VersionInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionInfoDto(val *VersionInfoDto) *NullableVersionInfoDto {
	return &NullableVersionInfoDto{value: val, isSet: true}
}

func (v NullableVersionInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


