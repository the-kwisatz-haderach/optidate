/*
Nager.Date API - V3

Nager.Date is open source software. If you would like to support the project you can award a GitHub star ‚≠ê or much better <a href='https://github.com/sponsors/nager'>start a sponsorship</a>

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dateapi

import (
	"encoding/json"
	"time"
)

// checks if the LongWeekendV3Dto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LongWeekendV3Dto{}

// LongWeekendV3Dto Long Weekend
type LongWeekendV3Dto struct {
	// StartDate
	StartDate *time.Time `json:"startDate,omitempty"`
	// EndDate
	EndDate *time.Time `json:"endDate,omitempty"`
	// DayCount
	DayCount *int32 `json:"dayCount,omitempty"`
	// NeedBridgeDay
	NeedBridgeDay *bool `json:"needBridgeDay,omitempty"`
}

// NewLongWeekendV3Dto instantiates a new LongWeekendV3Dto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLongWeekendV3Dto() *LongWeekendV3Dto {
	this := LongWeekendV3Dto{}
	return &this
}

// NewLongWeekendV3DtoWithDefaults instantiates a new LongWeekendV3Dto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLongWeekendV3DtoWithDefaults() *LongWeekendV3Dto {
	this := LongWeekendV3Dto{}
	return &this
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *LongWeekendV3Dto) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LongWeekendV3Dto) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *LongWeekendV3Dto) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *LongWeekendV3Dto) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *LongWeekendV3Dto) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LongWeekendV3Dto) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *LongWeekendV3Dto) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *LongWeekendV3Dto) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetDayCount returns the DayCount field value if set, zero value otherwise.
func (o *LongWeekendV3Dto) GetDayCount() int32 {
	if o == nil || IsNil(o.DayCount) {
		var ret int32
		return ret
	}
	return *o.DayCount
}

// GetDayCountOk returns a tuple with the DayCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LongWeekendV3Dto) GetDayCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DayCount) {
		return nil, false
	}
	return o.DayCount, true
}

// HasDayCount returns a boolean if a field has been set.
func (o *LongWeekendV3Dto) HasDayCount() bool {
	if o != nil && !IsNil(o.DayCount) {
		return true
	}

	return false
}

// SetDayCount gets a reference to the given int32 and assigns it to the DayCount field.
func (o *LongWeekendV3Dto) SetDayCount(v int32) {
	o.DayCount = &v
}

// GetNeedBridgeDay returns the NeedBridgeDay field value if set, zero value otherwise.
func (o *LongWeekendV3Dto) GetNeedBridgeDay() bool {
	if o == nil || IsNil(o.NeedBridgeDay) {
		var ret bool
		return ret
	}
	return *o.NeedBridgeDay
}

// GetNeedBridgeDayOk returns a tuple with the NeedBridgeDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LongWeekendV3Dto) GetNeedBridgeDayOk() (*bool, bool) {
	if o == nil || IsNil(o.NeedBridgeDay) {
		return nil, false
	}
	return o.NeedBridgeDay, true
}

// HasNeedBridgeDay returns a boolean if a field has been set.
func (o *LongWeekendV3Dto) HasNeedBridgeDay() bool {
	if o != nil && !IsNil(o.NeedBridgeDay) {
		return true
	}

	return false
}

// SetNeedBridgeDay gets a reference to the given bool and assigns it to the NeedBridgeDay field.
func (o *LongWeekendV3Dto) SetNeedBridgeDay(v bool) {
	o.NeedBridgeDay = &v
}

func (o LongWeekendV3Dto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LongWeekendV3Dto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.DayCount) {
		toSerialize["dayCount"] = o.DayCount
	}
	if !IsNil(o.NeedBridgeDay) {
		toSerialize["needBridgeDay"] = o.NeedBridgeDay
	}
	return toSerialize, nil
}

type NullableLongWeekendV3Dto struct {
	value *LongWeekendV3Dto
	isSet bool
}

func (v NullableLongWeekendV3Dto) Get() *LongWeekendV3Dto {
	return v.value
}

func (v *NullableLongWeekendV3Dto) Set(val *LongWeekendV3Dto) {
	v.value = val
	v.isSet = true
}

func (v NullableLongWeekendV3Dto) IsSet() bool {
	return v.isSet
}

func (v *NullableLongWeekendV3Dto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLongWeekendV3Dto(val *LongWeekendV3Dto) *NullableLongWeekendV3Dto {
	return &NullableLongWeekendV3Dto{value: val, isSet: true}
}

func (v NullableLongWeekendV3Dto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLongWeekendV3Dto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


