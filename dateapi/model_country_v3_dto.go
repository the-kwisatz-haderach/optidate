/*
Nager.Date API - V3

Nager.Date is open source software. If you would like to support the project you can award a GitHub star ‚≠ê or much better <a href='https://github.com/sponsors/nager'>start a sponsorship</a>

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dateapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CountryV3Dto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryV3Dto{}

// CountryV3Dto Country
type CountryV3Dto struct {
	CountryCode NullableString `json:"countryCode"`
	Name NullableString `json:"name"`
}

type _CountryV3Dto CountryV3Dto

// NewCountryV3Dto instantiates a new CountryV3Dto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryV3Dto(countryCode NullableString, name NullableString) *CountryV3Dto {
	this := CountryV3Dto{}
	this.CountryCode = countryCode
	this.Name = name
	return &this
}

// NewCountryV3DtoWithDefaults instantiates a new CountryV3Dto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryV3DtoWithDefaults() *CountryV3Dto {
	this := CountryV3Dto{}
	return &this
}

// GetCountryCode returns the CountryCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CountryV3Dto) GetCountryCode() string {
	if o == nil || o.CountryCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.CountryCode.Get()
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryV3Dto) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryCode.Get(), o.CountryCode.IsSet()
}

// SetCountryCode sets field value
func (o *CountryV3Dto) SetCountryCode(v string) {
	o.CountryCode.Set(&v)
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CountryV3Dto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryV3Dto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CountryV3Dto) SetName(v string) {
	o.Name.Set(&v)
}

func (o CountryV3Dto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryV3Dto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["countryCode"] = o.CountryCode.Get()
	toSerialize["name"] = o.Name.Get()
	return toSerialize, nil
}

func (o *CountryV3Dto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"countryCode",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCountryV3Dto := _CountryV3Dto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCountryV3Dto)

	if err != nil {
		return err
	}

	*o = CountryV3Dto(varCountryV3Dto)

	return err
}

type NullableCountryV3Dto struct {
	value *CountryV3Dto
	isSet bool
}

func (v NullableCountryV3Dto) Get() *CountryV3Dto {
	return v.value
}

func (v *NullableCountryV3Dto) Set(val *CountryV3Dto) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryV3Dto) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryV3Dto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryV3Dto(val *CountryV3Dto) *NullableCountryV3Dto {
	return &NullableCountryV3Dto{value: val, isSet: true}
}

func (v NullableCountryV3Dto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryV3Dto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


