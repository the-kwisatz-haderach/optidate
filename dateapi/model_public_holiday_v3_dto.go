/*
Nager.Date API - V3

Nager.Date is open source software. If you would like to support the project you can award a GitHub star ‚≠ê or much better <a href='https://github.com/sponsors/nager'>start a sponsorship</a>

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dateapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicHolidayV3Dto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicHolidayV3Dto{}

// PublicHolidayV3Dto Public Holiday
type PublicHolidayV3Dto struct {
	// The date
	Date *string `json:"date,omitempty"`
	// Local name
	LocalName NullableString `json:"localName"`
	// English name
	Name NullableString `json:"name"`
	// ISO 3166-1 alpha-2
	CountryCode NullableString `json:"countryCode"`
	// Is this public holiday every year on the same date
	// Deprecated
	Fixed *bool `json:"fixed,omitempty"`
	// Is this public holiday in every county (federal state)
	Global *bool `json:"global,omitempty"`
	// ISO-3166-2 - Federal states
	Counties []string `json:"counties,omitempty"`
	// The launch year of the public holiday
	LaunchYear NullableInt32 `json:"launchYear,omitempty"`
	// A list of types the public holiday it is valid
	Types []HolidayTypes `json:"types"`
}

type _PublicHolidayV3Dto PublicHolidayV3Dto

// NewPublicHolidayV3Dto instantiates a new PublicHolidayV3Dto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicHolidayV3Dto(localName NullableString, name NullableString, countryCode NullableString, types []HolidayTypes) *PublicHolidayV3Dto {
	this := PublicHolidayV3Dto{}
	this.LocalName = localName
	this.Name = name
	this.CountryCode = countryCode
	this.Types = types
	return &this
}

// NewPublicHolidayV3DtoWithDefaults instantiates a new PublicHolidayV3Dto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicHolidayV3DtoWithDefaults() *PublicHolidayV3Dto {
	this := PublicHolidayV3Dto{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *PublicHolidayV3Dto) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicHolidayV3Dto) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *PublicHolidayV3Dto) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *PublicHolidayV3Dto) SetDate(v string) {
	o.Date = &v
}

// GetLocalName returns the LocalName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PublicHolidayV3Dto) GetLocalName() string {
	if o == nil || o.LocalName.Get() == nil {
		var ret string
		return ret
	}

	return *o.LocalName.Get()
}

// GetLocalNameOk returns a tuple with the LocalName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicHolidayV3Dto) GetLocalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalName.Get(), o.LocalName.IsSet()
}

// SetLocalName sets field value
func (o *PublicHolidayV3Dto) SetLocalName(v string) {
	o.LocalName.Set(&v)
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PublicHolidayV3Dto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicHolidayV3Dto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *PublicHolidayV3Dto) SetName(v string) {
	o.Name.Set(&v)
}

// GetCountryCode returns the CountryCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PublicHolidayV3Dto) GetCountryCode() string {
	if o == nil || o.CountryCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.CountryCode.Get()
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicHolidayV3Dto) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryCode.Get(), o.CountryCode.IsSet()
}

// SetCountryCode sets field value
func (o *PublicHolidayV3Dto) SetCountryCode(v string) {
	o.CountryCode.Set(&v)
}

// GetFixed returns the Fixed field value if set, zero value otherwise.
// Deprecated
func (o *PublicHolidayV3Dto) GetFixed() bool {
	if o == nil || IsNil(o.Fixed) {
		var ret bool
		return ret
	}
	return *o.Fixed
}

// GetFixedOk returns a tuple with the Fixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PublicHolidayV3Dto) GetFixedOk() (*bool, bool) {
	if o == nil || IsNil(o.Fixed) {
		return nil, false
	}
	return o.Fixed, true
}

// HasFixed returns a boolean if a field has been set.
func (o *PublicHolidayV3Dto) HasFixed() bool {
	if o != nil && !IsNil(o.Fixed) {
		return true
	}

	return false
}

// SetFixed gets a reference to the given bool and assigns it to the Fixed field.
// Deprecated
func (o *PublicHolidayV3Dto) SetFixed(v bool) {
	o.Fixed = &v
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *PublicHolidayV3Dto) GetGlobal() bool {
	if o == nil || IsNil(o.Global) {
		var ret bool
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicHolidayV3Dto) GetGlobalOk() (*bool, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *PublicHolidayV3Dto) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given bool and assigns it to the Global field.
func (o *PublicHolidayV3Dto) SetGlobal(v bool) {
	o.Global = &v
}

// GetCounties returns the Counties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicHolidayV3Dto) GetCounties() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Counties
}

// GetCountiesOk returns a tuple with the Counties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicHolidayV3Dto) GetCountiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Counties) {
		return nil, false
	}
	return o.Counties, true
}

// HasCounties returns a boolean if a field has been set.
func (o *PublicHolidayV3Dto) HasCounties() bool {
	if o != nil && !IsNil(o.Counties) {
		return true
	}

	return false
}

// SetCounties gets a reference to the given []string and assigns it to the Counties field.
func (o *PublicHolidayV3Dto) SetCounties(v []string) {
	o.Counties = v
}

// GetLaunchYear returns the LaunchYear field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicHolidayV3Dto) GetLaunchYear() int32 {
	if o == nil || IsNil(o.LaunchYear.Get()) {
		var ret int32
		return ret
	}
	return *o.LaunchYear.Get()
}

// GetLaunchYearOk returns a tuple with the LaunchYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicHolidayV3Dto) GetLaunchYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LaunchYear.Get(), o.LaunchYear.IsSet()
}

// HasLaunchYear returns a boolean if a field has been set.
func (o *PublicHolidayV3Dto) HasLaunchYear() bool {
	if o != nil && o.LaunchYear.IsSet() {
		return true
	}

	return false
}

// SetLaunchYear gets a reference to the given NullableInt32 and assigns it to the LaunchYear field.
func (o *PublicHolidayV3Dto) SetLaunchYear(v int32) {
	o.LaunchYear.Set(&v)
}
// SetLaunchYearNil sets the value for LaunchYear to be an explicit nil
func (o *PublicHolidayV3Dto) SetLaunchYearNil() {
	o.LaunchYear.Set(nil)
}

// UnsetLaunchYear ensures that no value is present for LaunchYear, not even an explicit nil
func (o *PublicHolidayV3Dto) UnsetLaunchYear() {
	o.LaunchYear.Unset()
}

// GetTypes returns the Types field value
// If the value is explicit nil, the zero value for []HolidayTypes will be returned
func (o *PublicHolidayV3Dto) GetTypes() []HolidayTypes {
	if o == nil {
		var ret []HolidayTypes
		return ret
	}

	return o.Types
}

// GetTypesOk returns a tuple with the Types field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicHolidayV3Dto) GetTypesOk() ([]HolidayTypes, bool) {
	if o == nil || IsNil(o.Types) {
		return nil, false
	}
	return o.Types, true
}

// SetTypes sets field value
func (o *PublicHolidayV3Dto) SetTypes(v []HolidayTypes) {
	o.Types = v
}

func (o PublicHolidayV3Dto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicHolidayV3Dto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	toSerialize["localName"] = o.LocalName.Get()
	toSerialize["name"] = o.Name.Get()
	toSerialize["countryCode"] = o.CountryCode.Get()
	if !IsNil(o.Fixed) {
		toSerialize["fixed"] = o.Fixed
	}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if o.Counties != nil {
		toSerialize["counties"] = o.Counties
	}
	if o.LaunchYear.IsSet() {
		toSerialize["launchYear"] = o.LaunchYear.Get()
	}
	if o.Types != nil {
		toSerialize["types"] = o.Types
	}
	return toSerialize, nil
}

func (o *PublicHolidayV3Dto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"localName",
		"name",
		"countryCode",
		"types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicHolidayV3Dto := _PublicHolidayV3Dto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicHolidayV3Dto)

	if err != nil {
		return err
	}

	*o = PublicHolidayV3Dto(varPublicHolidayV3Dto)

	return err
}

type NullablePublicHolidayV3Dto struct {
	value *PublicHolidayV3Dto
	isSet bool
}

func (v NullablePublicHolidayV3Dto) Get() *PublicHolidayV3Dto {
	return v.value
}

func (v *NullablePublicHolidayV3Dto) Set(val *PublicHolidayV3Dto) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicHolidayV3Dto) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicHolidayV3Dto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicHolidayV3Dto(val *PublicHolidayV3Dto) *NullablePublicHolidayV3Dto {
	return &NullablePublicHolidayV3Dto{value: val, isSet: true}
}

func (v NullablePublicHolidayV3Dto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicHolidayV3Dto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


